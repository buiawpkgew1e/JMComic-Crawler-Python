list2=['101359', '101888', '102239', '102433', '103294', '103295', '104638', '10594', '10712', '111480', '112948', '113257', '114143', '114764', '116259', '119130', '121283', '122349', '125080', '125813', '127730', '131273', '136204', '136210', '137450', '138483', '13918', '13990', '140635', '140963', '142459', '142985', '143216', '14414', '14626', '148297', '148558', '149083', '150533', '150789', '151479', '152093', '158166', '163562', '16531', '168048', '16847', '17799', '179337', '180649', '180803', '181482', '181632', '181886', '183007', '184462', '184705', '187884', '188309', '189220', '189313', '189544', '190046', '190136', '191563', '192358', '19305', '193127', '195007', '196679', '198123', '198154', '199285', '204306', '205465', '205535', '205614', '206450', '207558', '208841', '209823', '209896', '210497', '211700', '214403', '216056', '21620', '217272', '217588', '217732', '218679', '219409', '223348', '224063', '224268', '224269', '224270', '224280', '225017', '225768', '225812', '226002', '226063', '227083', '228195', '229845', '230286', '230404', '230662', '230802', '231913', '232935', '2330', '234454', '235205', '23530', '237624', '239296', '239483', '24009', '240139', '241446', '242668', '243835', '244810', '245399', '245445', '245809', '245966', '247120', '248539', '249383', '250593', '251182', '251944', '25207', '252448', '2527', '252906', '253855', '255193', '256936', '2582', '259942', '260291', '262048', '262289', '263527', '263925', '26739', '267502', '26994', '271', '271262', '271953', '274115', '275510', '277089', '278262', '27881', '280300', '283240', '283283', '285843', '288071', '2882', '288246', '288653', '290605', '291220', '291605', '292011', '293825', '294556', '294577', '295042', '297484', '300231', '300260', '300389', '300561', '300734', '301141', '301144', '301672', '301693', '301825', '301912', '302103', '302433', '302556', '303004', '303148', '303204', '304803', '309334', '309353', '310665', '314909', '317071', '317716', '32533', '325333', '32574', '32633', '32893', '330269', '330967', '331249', '333721', '334739', '334745', '334761', '335007', '33548', '336789', '33908', '33911', '340044', '340355', '340494', '342827', '34534', '345426', '346545', '347096', '347564', '350275', '350287', '351601', '355620', '357476', '357649', '359547', '359853', '359855', '364360', '366289', '367512', '368143', '368626', '368703', '372005', '372722', '375747', '376160', '3766', '376628', '376751', '376752', '37682', '378628', '379386', '379717', '379728', '380098', '383975', '385043', '385477', '387074', '387169', '387413', '387655', '387659', '387660', '387661', '388407', '389111', '391073', '391685', '39198', '392871', '394636', '395080', '395704', '396008', '397749', '399326', '399385', '40009', '400308', '400314', '400995', '401119', '401183', '401196', '401302', '401465', '401484', '403293', '403910', '404380', '404404', '4048', '404981', '405010', '405120', '405273', '405306', '407371', '407816', '408314', '40832', '414125', '416152', '416643', '416660', '417119', '417146', '417454', '419020', '419021', '419619', '4199', '421045', '421055', '422127', '422129', '422448', '422449', '422816', '422850', '422865', '423209', '423370', '423408', '423596', '423863', '4243', '424511', '424778', '425022', '425452', '42608', '42609', '426550', '427434', '427669', '427673', '427675', '427679', '430743', '431433', '432007', '432467', '433255', '435226', '436327', '437567', '438055', '438251', '439123', '439570', '439633', '439634', '440097', '440190', '441733', '442208', '443163', '444110', '444342', '444422', '444521', '445815', '446483', '447019', '448498', '449105', '449869', '450850', '453364', '453642', '453790', '454129', '454404', '454451', '454458', '455049', '455381', '457448', '458021', '459264', '459265', '459612', '460809', '461099', '461152', '463032', '463812', '463946', '463960', '465320', '465549', '467506', '467745', '473271', '473999', '474352', '475487', '475841', '475891', '476075', '477104', '477310', '479886', '480596', '482274', '482556', '483354', '483356', '483357', '485009', '488145', '490868', '493390', '49385', '494625', '494732', '494767', '495805', '496416', '498248', '498595', '499441', '499495', '500058', '501216', '501217', '502170', '502895', '502938', '503101', '503130', '504316', '504980', '505010', '505031', '505351', '505352', '505983', '506831', '506939', '507050', '507243', '507589', '507758', '508572', '508810', '510784', '511141', '511142', '512861', '514979', '5154', '517266', '517271', '517727', '518025', '520686', '521337', '524863', '525248', '526664', '527313', '527371', '528784', '531456', '532067', '532412', '532414', '534451', '534452', '536763', '536765', '536766', '536767', '54060', '54162', '54233', '54408', '54507', '547801', '5500', '565546', '565606', '5779', '57968', '580934', '589001', '589026', '589338', '601657', '604629', '60502', '605159', '607340', '607677', '62115', '624383', '626276', '6315', '65844', '65947', '66278', '6631', '67024', '70749', '71828', '73667', '76847', '78012', '78050', '81084', '81213', '816', '86076', '8750', '87571', '8975', '90063', '92255', '92491', '9524', '99150', '99349', '99493']

import os
import time
from threading import current_thread

from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
302433
605159
624383
626276
547801
532067
607677
607340
604629
601657
589026
589338
589001
589001
580934
565546
565606
397749
403910
334761
427669
427679
467745
467506
385043
262289
303004
300389
245445
291220
475841
334745
179337
187884
309334
239483
465549
463812
'''
# 去除空白字符并转换为集合去重，然后转换回列表
jm_albums_set = {x.strip() for x in jm_albums.splitlines() if x.strip()}
# 找到不在 list2 中的唯一ID
unique_ids = [x for x in jm_albums_set if x not in list2]
# 将去重后的结果保存到文件
with open('list2.txt', 'w') as file:
    for item in unique_ids:
        file.write(f"{item}\n")
print(f"结果已保存到 list2.txt 文件中。")
import os

# 读取文件 list2.txt 中的数字
file_path = 'list2.txt'
try:
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            for line in file:
                number = line.strip()
                if number and number not in list2:
                    list2.append(number)
    else:
        print(f"文件 {file_path} 不存在。")
except Exception as e:
    print(f"读取文件时发生错误: {e}")
list2 = list(dict.fromkeys(list2))
list2.sort()
# 将结果保存到文件
output_file_path = 'final_list.txt'
try:
    with open(output_file_path, 'w') as file:
        file.write(str(list2))
    print(f"结果已保存到 {output_file_path} 文件中。")
except Exception as e:
    print(f"保存文件时发生错误: {e}")
print(f"重后的结果：{unique_ids}")
def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        if isinstance(text, list):
            text = '\n'.join(text)
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', unique_ids)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
