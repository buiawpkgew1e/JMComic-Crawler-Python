
list2 = ['536766','536767','532067','520686','517727','518025','517271','517266','514979','441733','505983','506939','507243','507589','507758','508572','508810','510784','512861','507050','506831','502895','503101','505010','505031','505352','505351','502170','502938','503130','482274','475891','480596','483357','483356','483354','498595','499441','500058','499495','501216','485009','482556','495805','496416','494767','494732','494625','488145','493390','479886','465320','463960','473271','473999','475841','477310','477104','440190','439633','439634','442208','449105','448498','446483','454458','387074', '444521','453364','430743','453642','453790','387169', '310665', '302556', '302103', '303204', '303148', '71828', '278262', '293825', '294577', '297484', '234454', '300231', '300260', '300734', '300561', '301141', '301672', '391073', '301144', '301693', '301912', '301825', '288653', '288071', '232935', '239296', '237624', '235205', '240139', '242668', '245399', '243835', '248539', '250593', '251944', '252906', '252448', '253855', '255193', '256936', '259942', '262048', '263527', '217588', '218679', '214403', '219409', '223348', '224268', '224280', '224270', '224269', '226002', '229845', '230404', '230286', '230662', '230802', '184462', '131273', '189544', '189313', '189220', '190136', '190046', '192358', '367512', '199285', '205535', '205465', '205614', '204306', '209896', '209823', '150789', '142985', '121283', '149083', '150533', '151479', '152093', '158166', '168048', '180649', '180803', '163562', '181886', '184705', '114764', '116259', '87571', '60502', '102239', '125080', '127730', '136210', '136204', '137450', '138483', '183007', '267502', '140635', '140963', '62115', '65844', '65947', '66278', '67024', '70749', '76847', '78012', '78050', '92255', '92491', '99150', '99349', '101888', '102433', '112948', '111480', '34534', '37682', '39198', '40009', '40832', '42609', '42608', '49385', '54060', '54162', '54507', '54408', '54233', '57968', '16847', '17799', '19305', '21620', '25207', '24009', '26739', '26994', '27881', '32533', '13990', '23530', '32574', '32633', '32893', '33908', '33911', '33548', '271', '816', '2882', '2330', '3766', '4199', '4048', '4243', '5154', '5779', '6315', '8750', '9524', '10712', '16531', '5500', '14414', '2582', '81084', '225017', '119130', '245966', '114143', '380098', '372722', '247120', '217272', '104638', '196679', '113257', '148558', '208841', '333721', '181482', '260291', '225768', '330269', '376628', '225812', '330967', '271953', '13918', '99493', '81213', '8975', '317716', '143216', '10594', '14626', '101359', '226063', '288246', '283283', '249383', '292011', '283240', '241446', '73667', '228195', '103295', '210497', '103294', '148297', '193127', '231913', '245809', '285843', '191563', '227083', '6631', '391685', '379728', '388407', '385477', '217732', '387413', '383975', '379717', '376752', '375747', '376751', '366289', '368626', '357649', '357476', '350275', '392871', '396008', '395704', '395080', '394636', '346545', '2527', '125813', '336789', '340355', '188309', '335007', '198123', '251182', '122349', '290605', '295042', '263925', '195007', '275510', '206450', '181632', '142459', '198154', '216056', '271262', '280300', '304803', '379386', '317071', '340494', '291605', '387661', '387660', '387659', '387655', '314909', '277089', '274115', '309353', '207558', '331249', '224063', '347096', '244810', '401196', '401183', '401302', '401465', '90063', '403293', '404981', '405010', '405273', '407371', '399385', '419619', '325333', '405120', '417146', '422129', '422850', '422816', '422865', '423209', '423408', '423596', '423863', '424511', '425022', '211700', '422127', '417454', '427434', '425452', '426550', '86076', '427675', '427673','438055', '431433','432007','438251','444422','444110','439123','440097','439570','450850', '421045', '372005', '400995', '400314', '400308', '334745', '378628', '351601', '350287', '340044', '334761', '334739', '421055', '359855', '419021', '359853', '414125', '355620', '401484', '359547', '407816', '347564', '416152', '345426', '416643', '342827', '416660', '399326', '419020', '368703', '408314', '376160', '405306', '404404', '364360', '404380', '401119', '422448', '422449', '423370', '424778', '437567', '436327', '433255', '435226', '432467', '455049', '463032', '461099', '463946', '461152', '459264', '459265', '460809', '457448', '458021', '455381', '417119', '444342', '447019', '445815', '294556', '454451', '454129', '454404', '536765', '525248', '521337', '511142', '504980', '511141', '389111', '526664', '524863', '501217', '498248', '490868', '476075', '475487', '459612', '474352', '449869', '443163', '368143', '302433', '262289', '303004', '300389', '291220', '179337', '187884', '309334', '239483', '465549', '463812', '397749', '385043', '467506', '427669', '467745', '403910', '427679', '536763', '534452', '534451', '532414', '532412', '531456', '527313', '527371', '528784', '504316', '245445', '475841']

from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
302433
397749
536765
403910
334761
427669
427679
467745
467506
385043
262289
303004
300389
245445
291220
475841
334745
179337
187884
309334
239483
465549
463812
'''

# 单独下载章节
jm_photos = '''



'''
# 去除空白字符并转换为集合去重，然后转换回列表
jm_albums_set = {x.strip() for x in jm_albums.splitlines() if x.strip()}
# 找到不在 list2 中的唯一ID
unique_ids = [x for x in jm_albums_set if x not in list2]
# 将去重后的结果保存到文件
with open('list2.txt', 'w') as file:
    for item in unique_ids:
        file.write(f"{item}\n")
print(f"结果已保存到 list2.txt 文件中。")
import os

# 读取文件 list2.txt 中的数字
file_path = 'list2.txt'
try:
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            for line in file:
                number = line.strip()
                if number and number not in list2:
                    list2.append(number)
    else:
        print(f"文件 {file_path} 不存在。")
except Exception as e:
    print(f"读取文件时发生错误: {e}")
list2 = list(dict.fromkeys(list2))
list2.sort()
# 将结果保存到文件
output_file_path = 'final_list.txt'
try:
    with open(output_file_path, 'w') as file:
        file.write(str(list2))
    print(f"结果已保存到 {output_file_path} 文件中。")
except Exception as e:
    print(f"保存文件时发生错误: {e}")
print(f"重后的结果：{unique_ids}")
def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', unique_ids)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
